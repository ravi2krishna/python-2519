18th Aug
========

-> Basic Python & Advanced Python

    -> Full Stack 

    -> Data Analytics / Data Science / Data Engineering

    -> Cloud / DevOps

-> Python

    -> Programming Language

    -> Programming Language 
    
        - To communicate with Machines
        - Giving commands (instructions) to computer

        -> English 

        -> Computers can only understand Binary Language

            -> Binary Language - 010101010101

            -> 01010000 01111001 01110100 01101000 01101111 01101110

                -> Python (Intermediate / Interpreter)

            -> Python is high-level, programming Language    
                

        -> general-purpose programming Language (Python)

            -> Desktop Applications
            -> Web Applications (Django, Flask, FAST API etc)
            -> Automation Scripts (Cloud / DevOps)
            -> Functional Based 
            -> etc

        -> domain specific programming Language

            -> SQL - Manage data bases using a language 
            -> HTML, CSS,  

    -> Programming Paradigms 

        -> Python supports Multi Paradigm approach to solve problems

            -> Imperative (How To Do)

                -> Python with OOPS

            -> Declarative (What To Do)

                -> Functional Programming


19th Aug
========

    -> Hardware 

        -> i3 / i5 Processor
        -> 8 GB RAM
        -> 250 GB SSD / HDD
    
    -> Softwares

        -> System Software

            -> Win / Linux / Unix(MACOS)

                -> Install Python 3.13.X (Python Interpreter)

                    -> Making our System Capable of running Python Code
                
                -> Install IDE (Integrated Development Environment) (Visual Studio Code)

                    -> For Writing Code

                    -> We have support For

                        -> Auto Code Completion

                        -> Syntax Highlighting

                        -> External Extensions Support

                        -> Debugging, Build Related Tools 

                -> Install Git (Version Control System - Code Tracking)

                    -> Client Software 

                    -> Track Source Code in your Workstation (Your Laptop)

                    -> Tracked Code will be uploaded to GitHub

        -> We need to setup GitHub Accounts 

            -> Storing Source Code

            -> Integrate GitHub Account with Git & IDE

20th Aug
========

-> How To Setup 

    -> Python
    -> IDE - VS Code
    -> Git (Git bash)
    -> GitHub
    -> Version Controlling
    -> Repository 
    -> Cloning 
    -> Pushing

21st Aug
========

-> Write Python Code 

    -> Script Mode (100%)

        -> Using code editor 

    -> Command Line / Interactive Mode (Quick Checks) 

        -> Directly executing code on python Interpreter using 
            CLI (Command Line Interface)

    -> Syntax - Rules and guidelines 

    -> print(hello world) -- issue
    -> print(9) -- No issue

    -> 9 is literal number, it doesn't need to be defined before hand
    -> hello world is a text, which needs to be represented in single
    or double quotes

        -> print(hello world) Wrong Syntax
        -> print('hello world') Correct Syntax
    
    -> Like English has 26 alphabets, which is basis for forming 
        words and sentences
    
    -> Python has same concept, which are called as Keywords

        -> keywords + syntax = program / app

    -> import is a keyword --> imports module --> module is a .py file

22nd Aug
========

-> Identifiers 

    -> Within python an Identifier is name used to identify following

        -> variables
        -> functions
        -> classes
        -> objects
        -> methods
        -> modules 
        -> etc
    
    -> Rules for naming Identifiers

        -> Can contain

            -> letters (a-z, A-Z)
            -> digits (0-9)
            -> underscore (_) 
        
        -> Must Start With

            -> A letter (a-z, A-Z)
            -> underscore (_) 
        
        -> NOTE : Cannot start with digits 
        -> NOTE : Cannot be keywords 
        -> NOTE: Case Sensitive (Name, name, NAME) (A, a)
        -> NOTE: Always name the Identifiers appropriately


-> Why Python / Key Features Of Python

    -> It's Easy (**)

        -> Syntax
        -> Execution
        -> Simplicity of language(space)  

    -> Fewer Lines Of Code (**)

        -> Addition Program in Python it's 3 lines
        -> Addition Program in Java it's 7 lines

    -> Interpreted (Python) vs Compiled (Java) (**)

        -> Performance -> Faster -> Compiled

        -> Performance -> Slower -> Interpreted

        -> Python Development Speed -> Faster 

            -> Python is best prototype language

        -> Java Development Speed -> Slower 

    -> Dynamically Typed (Python) (**)

        -> No need to explicitly define Data types

        -> Static Typed (Java), where we need to explicitly
            define the data types

    -> Vast Library (**)

    -> Scripting / Object Oriented (OOPS) / Functional (**)

    -> Open Source (Free)

    -> Robust 

    -> Platform Independent


23rd Aug
========

-> Variables

    -> Variables are names for memory locations

        -> Persistent Data (Permanent Data / Long Term Data)

            -> Hard Disk 

        -> Non-Persistent Data (Temporary Data)

            -> RAM (Memory)
    
    -> A variable allows you to 

        -> Assign Data
        -> Manipulate Data (If Required)
        -> Retrieve Data 

    -> Syntax 

        -> variable_name = value
            student_age = 25

            = Assignment operator

    -> NOTE: In Python, the type of a variable can change during execution.

    -> NOTE: A function does a task, and is represented using ()

    -> type() - what is the data type of specified variable

    -> id() - gives the memory address/location of variable

    -> NOTE: Even though a and c are different variables, 
        Python optimizes memory and may reuse the same object.
    
    -> Mutable Data : Data that can change / can be changed (Modify)

        -> Lists, Dictionaries, Sets etc

    -> Immutable Data : Data that cannot be changed (Non Modifiable)

        -> numbers, strings, tuples etc

    -> Any variable data, we can output using print() 

    -> Operator Overloading - a single operator exhibits multiple behaviors
        based on the input data given (OOPS Principle - Polymorphism)


25th Aug
========

-> What is concatenation ? 
    -> Joining multiple Strings

-> What is interpolation ? 
    -> interpolation in programming means replacing placeholders with actual values

-> Using f-Strings (Formatted String Literals)  

    -> An f-String allows you to embed variables directly inside a string using {}

-> A variable allows you to 

        -> Assign Data
            -> Manipulate Data (If Required)
        -> Retrieve Data 


-> Operators

    -> In python, an operator is symbol which performs an operation on
        variables and values

    -> To Manipulate Data we need Operators    

    -> Types Of Operators

        -> Arithmetic Operators - Mathematical calculations
            -> + - * / % 
            -> //- floor division (same as division, but round off value)
            -> ** - exponentiation

        -> Compound Assignment Operators
            -> Python provides Operator to combine Arithmetic and Assignment Operators
            -> For concise(short hand) coding 
            -> x = x + 5 --> x += 5

        -> Comparison Operators    

            -> Used to compare values and return a boolean type(True/False) as result
            -> ==, !=, >, <, >=, <=

        -> Logical Operators
            -> Used to combine multiple conditions(boolean values)
            -> and - return true, when conditions are true
            -> or - return true, at least one condition is true
            -> not - negates the boolean value, if value is true then its result false

26th Aug
========

        -> Membership Operators
            -> It's used to test if a sequence is present in object
                -> in : returns True if the sequence has specified value
                -> not in : returns True if the sequence has no specified value

        -> Identity Operators
            -> It's sued to compare objects 
            -> NOTE : Not comparing values (If you want to compare values use ==)

                -> is : Returns True if both variables are pointing to same memory block
                -> is not : Returns True if both variables are not pointing to same memory block    


            -> NOTE : Is Python 100% Object Oriented Language or not ? Yes
                        -> In python everything is an object

                -> Java has primitive data types


-> Data Types 

    -> Data Types are categories that define, what kind of data a variable can hold

    -> Numeric Types

        -> Numbers with or without decimal points

            -> Integer : Whole Numbers 0,1,-1,199 etc
            -> Float : Decimal numbers 3.14, 10.5, 2.0 etc
            -> Complex : Complex numbers like in maths
                        Math : a + ib (i - imaginary)
                        Python : a + bj (j - imaginary)
        
        -> Text Type:

            -> String : A sequence of characters declared between '' or " "
            -> NOTE : Python doesn't support single character data type
        
        -> Boolean Type:

            -> Returns True or False 
        
        -> Sequence Types 

            -> String is also a sequence type
            -> List : Multiple Values to be stored as a sequence, represented in [] -> Mutable (Changeable)
            -> Tuple : Multiple Values to be stored as a sequence, represented in () -> Immutable (Not Changeable)
        
        -> Set Type

            -> Set : Multiple Values to be stored as a sequence, represented in {} -> Unique Data Only
            -> Frozen Set : Multiple Values to be stored as a sequence, represented in {} -> Unique Data Only & Immutable

        -> Dictionary(Mapping) Type

            -> Dictionary : Multiple Values to be stored as a sequence of key and value pairs, , represented in {}

        -> None Type : Represents nothing i.e absence of value

        -> NOTE : All the above are predefined data types, we can create our custom data types based on requirements  


3rd Sep 2025
============

-> Student Management System

-> Type Conversion & Type Casting

    -> The above are used to convert values from one data type to another data type

    -> Type Conversion : Implicit / Automatic meaning python by default performs 
        conversions when it's safe and there is no data loss 
            -> Widening : conversion of smaller data types to larger 
    
    -> Type Casting : Explicit / Manually done by developer using built in functions
        -> Narrowing : conversion of larger data types to smaller 
            -> int() -> converts to integer --> int(3.5) - 3
            -> float() -> converts to float --> int(3) - 3.0
            -> str() -> converts to string --> str(100) - "100"

4th Sep 2025
============

    -> Control Structures / Statement

    -> Control Structures helps you to control the flow of execution in program

    -> Categories

        -> Decision Making Statements (Conditional Statements)
        -> Looping Statements (Iterative Statements)
        -> Branching Statements (Jump Statements)

    -> Conditional / Decision Making Statements

        -> Used to evaluate a condition (True/False) 

        -> if : Runs block of code if condition is true
        -> if else : Runs one block of code if condition is true and 
                     runs another block of code if condition is false
        -> elif ladder : Used to check multiple conditions 
        -> match-case : alternative to if-else, when you have multiple conditions
    
    -> Indentation : Refers to spaces to the beginning of the line that will 
        define code blocks (conditionals, loops, functions, classes etc)

        -> At least one space or recommended is 4 spaces 
        -> All lines in the same block must have same Indentation
        -> Improper Indentation : Syntax Error
    
    -> input() function : takes user input from keyboard as a string 

        -> variable = input("Enter Some Value)

    -> Ternary Operator : also called as Conditional Operator, allows you to
        write short hand if-else Statement, generally used for single expressions

        -> Syntax : 
            value_if_true if condition else value_if_false

5th Sep 2025
============

    -> Nested Conditionals : Conditionals inside Conditionals

    -> Looping Statements (Iterative Statements)

        -> Used to execute a block of code repeatedly, based on a condition.

            -> For repetitive tasks and automation tasks
        
        -> while loop : Runs a block of code, as long as the specified condition is True

        -> for loop : Used to Iterate over a Sequence(Strings, Lists, Tuples, Range etc)
    
        -> dir() : used to list all the valid attributes and functionalities 

        -> range() : used to generate a sequence of numbers

6th Sep 2025
============

    -> range(start,stop,step)

        -> start: starting value by default is 0
        -> stop: ending value(excluded)
        -> step: increment default is 1

    -> few examples

        -> range(5) : 0 1 2 3 4
        -> range(1,6) : 1 2 3 4 5
        -> range(1,6,1) : 1 2 3 4 5
        -> range(2,10,2) : 2 4 6 8 

    -> To Do the step reverse use -1

        -> range(10,1,-1) : 10 9 8 7 6 5 4 3 2
        -> range(10,1,-2) : 10 8 6 4 2
    
    -> Nested Loops : Loops inside Loops

    -> Branching Statements (Jump Statements)

        -> Used to control the flow of iterations inside the loops  

            -> break : exits the loop entirely
            -> continue : skips the current iteration and continue the loop
            -> pass : does nothing, generally used as place holder

8th Sep 2025
============

-> Strings : One of the most important and widely used data type.

-> In Python, String is a sequence of characters enclosed within 
    single or double quotes, we can use triple quotes also but not recommended.

    -> NOTE : triple quotes are recommended for multi line strings 

    -> If you want to use ' inside a string, enclose with double quotes

    -> If you want to use " inside a string, enclose with single quotes

    -> If you want to use both ' and " quote, then use triple single or double quotes

-> Indexing In Python

    -> Python allows you to access each character in a string using an index number

    -> Index Starts From 0 (Zero)

    -> Indexing goes in both positive and negative directions too

    -> text = "python"

        0   1   2   3   4   5 (positive indexing)
        p   y   t   h   o   n
       -6              -2   -1 (negative indexing)

       -> print(text[index])
       -> print(text[4]) # o
    
    -> If index is not given properly, leads to Errors

    -> NOTE: we have a predefined function len() -> returns number of items in an object


    -> Slicing In Python : Slicing means cutting a substring from the original string using index

        -> To access range of characters in a string

        -> string[start:stop:step]

            start: index to start from (inclusive)
            stop: index to stop at (exclusive)
            step: how many character to step(default is 1)
9th Sep 2025
============

    -> Negative Slicing (Backward)

    -> Positive Slicing (Forward)

    -> String Immutability : Once a string is created, it cannot be changed 
    
    -> String Formatting 

    -> String Repetition : Multiply the string using * operator

    -> String Methods : String class provides multiple methods to work with string related operations

        -> Input : RAvi2KRIshna

        -> Output : ravi2krishna@gmail.combine

11th Sep 2025
=============

    -> Application Using 
        [ Identifiers - Variables - Operators - Control Statements - Strings]

    
12th Sep 2025
=============

    -> Enhanced Student Grade & FEE Tracker - 1

13th Sep 2025
=============

    -> -> Enhanced Student Grade & FEE Tracker - 2

15th Sep 2025
=============

    -> Complex Data Types (Data Structures)

        -> Simple Data Type : One Value 

            -> data = 10

        -> Complex Data Type : Multiple Values 

            -> data = [10,20,30,40,50] 

    -> In python to store more than one value, we have following classes

        -> Lists
        -> Tuples
        -> Sets
        -> Dictionaries

    -> Lists 

        -> List is a data Structure which allows you to store multiple values in single variable

        -> Lists are represented using [] or using list class

        -> Accessing Data in lists

            -> Like in strings, for lists we have index starts from 0

            -> Has both positive and negative index

            -> Indexing same as strings

            -> Slicing same as strings

            -> nums = [10,20,30,40,50]

                     0   1    2    3    4  (positive indexing)
                    10   20   30   40   50  
                    -6             -2   -1 (negative indexing)
            
            -> string[start:stop:step]

            start: index to start from (inclusive)
            stop: index to stop at (exclusive)
            step: how many character to step(default is 1)

    -> Negative Slicing (Backward)

    -> Positive Slicing (Forward)

16th Sep 2025
=============

    -> Looping Through Lists 

    -> Using Operators on elements of lists

    -> Conditionals with Lists 

    -> Duplicates are also allowed in Lists 

    -> List Methods / Operations

        print(dir(list))

17th Sep 2025
=============

-> List Methods / Operations Continued 

-> List Characteristics 

    -> Ordered : Lists preserve order 

    -> Mutable : Changeable / Modifiable (append(), remove())

    -> Duplicates allowed 

    -> Can hold different types of data (int, str, float etc)


->  Tuples 

     -> Tuples is a data Structure which allows you to store multiple values in single variable

        -> Tuples are represented using () or using tuple class

        -> Accessing Data in Tuples

            -> Like in strings, for Tuples we have index starts from 0

            -> Has both positive and negative index

            -> Indexing same as strings

            -> Slicing same as strings

            -> nums = (10,20,30,40,50)

                     0   1    2    3    4  (positive indexing)
                    10   20   30   40   50  
                    -6             -2   -1 (negative indexing)
            
            -> string[start:stop:step]

            start: index to start from (inclusive)
            stop: index to stop at (exclusive)
            step: how many character to step(default is 1)

    -> Negative Slicing (Backward)

    -> Positive Slicing (Forward)

    -> Looping Through Tuples 

    -> Using Operators on elements of Tuples

    -> Conditionals with Tuples 

    -> Duplicates are also allowed in Tuples 

    -> Tuples Methods / Operations

        print(dir(tuple))
    

-> Tuples Characteristics 

    -> Ordered : Tuples preserve order 

    -> Immutable(*) : Not Changeable / Not Modifiable (only index() & count())

    -> Duplicates allowed 

    -> Can hold different types of data (int, str, float etc)

    -> NOTE : Tuples should be used in READ ONLY DATA (Constant/Fixed/Static)